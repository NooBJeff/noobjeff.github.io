<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://thissentenceiswrong.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thissentenceiswrong.github.io/" rel="alternate" type="text/html" /><updated>2017-05-17T22:50:31+08:00</updated><id>https://thissentenceiswrong.github.io/</id><title type="html">并学不到东西的博客</title><subtitle>分享编程经验，生活琐事
</subtitle><entry><title type="html">配置服务器还是这么蛋疼</title><link href="https://thissentenceiswrong.github.io/2017/05/17/%E7%97%9B%E8%8B%A6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8.html" rel="alternate" type="text/html" title="配置服务器还是这么蛋疼" /><published>2017-05-17T00:00:00+08:00</published><updated>2017-05-17T00:00:00+08:00</updated><id>https://thissentenceiswrong.github.io/2017/05/17/%E7%97%9B%E8%8B%A6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8</id><content type="html" xml:base="https://thissentenceiswrong.github.io/2017/05/17/%E7%97%9B%E8%8B%A6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8.html">&lt;p&gt;今天的任务是配好新的服务器环境，并将之前的聊天室项目部署上去。&lt;/p&gt;

&lt;p&gt;接触Linux这么久了，每次干这种配环境的事情，仍然要头疼一天。&lt;/p&gt;

&lt;p&gt;安装软件源，安装软件及运行环境，配置服务器，PHP，MySQL，添加配置用户及权限。&lt;/p&gt;

&lt;p&gt;这次的系统是CentOS7，之前只用过Ubuntu，因此十分不熟悉，不过还好网上的现成教程够多，安装软件配置环境什么的 ctrl C+V 还能坚持。但是安装好nginx开始配置服务器的时候，噩梦开始了。&lt;/p&gt;

&lt;h2 id=&quot;http-403-forbidden&quot;&gt;HTTP 403 Forbidden&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Permission Deny,Permission Deny,Permission Deny,Permission Deny…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;​															— error.log&lt;/p&gt;

&lt;p&gt;其实在刚刚设置好nginx的文件root的时候，我是心里有底的：现在访问肯定是各种报错，因为Linux这种东西权限没配置好分分钟就能让你崩溃。&lt;/p&gt;

&lt;p&gt;但是当我创建www用户及用户组，设置nginx以www用户运行，chown所有网站文件为www:www，chmod 775（这个当然可以更细致，但是暂时懒得那么做）之后，浏览器依然坚持不懈报错403的时候，我TM就疯了。又是哪里出了错？&lt;/p&gt;

&lt;p&gt;遂查看error log，错误信息从没变过，一直是获取index的时候permission denied, 但是我在nginx里设置好了&lt;code class=&quot;highlighter-rouge&quot;&gt;index index.html index.php&lt;/code&gt;这种的，文件root目录下也有index，我看了下PHP，安装也是正确的，能够使用（写这篇文章的时候想起来，我没有测试nginx能不能正常使用php，但是就算不能的话报错也不应该是403吧，明天添加一个 index.html 看看是不是php的问题（应该不是，因为我试过访问root子目录下的资源文件，仍然是403错误））。我TM就绝望了，以我浅薄的经验，我不知道还能哪里有问题。热情的百度谷歌也未能帮我找出问题所在。&lt;/p&gt;

&lt;p&gt;于是我把所有设置都调回root账号权限，服务器使用root账号运行，文件权限root:root 777，再打开浏览器，oh hell，403永不为奴。我TM就关电脑打卡下班回宿舍，连每日报告都没心情写了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;现在一想到明天还要面对这个问题，心里就一拧。他娘的到底是哪里有问题？哪里的权限设置出了问题？？？&lt;/p&gt;</content><author><name></name></author><summary type="html">今天的任务是配好新的服务器环境，并将之前的聊天室项目部署上去。</summary></entry><entry><title type="html">实习项目小结</title><link href="https://thissentenceiswrong.github.io/2017/05/16/%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93.html" rel="alternate" type="text/html" title="实习项目小结" /><published>2017-05-16T00:00:00+08:00</published><updated>2017-05-16T00:00:00+08:00</updated><id>https://thissentenceiswrong.github.io/2017/05/16/%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93</id><content type="html" xml:base="https://thissentenceiswrong.github.io/2017/05/16/%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93.html">&lt;p&gt;已经实习了一个多月了，期间就接触了两个项目：第一个项目是替换一下老旧的API，工作量比较少因此一周内就完成了；第二个项目目前还在做，大概是要完成一个聊天室的东西。&lt;/p&gt;

&lt;p&gt;其实我这的实习真的没有想象的那么好，我感觉自己就是个接盘侠。。。因为组里其他人不会用PHP，所以头头就把以前的老旧PHP项目丢给我来修整。面对这些没有文档没有完善注释、服役年龄比我学习编程时间还长的项目，我是xx的：光是从零开始读代码理解项目各个功能、工作流程、框架作用就要花上好几天——因为根本没有文档说明，只能去代码堆里找答案。&lt;/p&gt;

&lt;p&gt;就拿第二个项目来说吧。这是一个类似网络聊天室的东西，被拿来用作我公司网站的在线客服服务。拿到手上研究后发现，网站部分使用ThinkPHP3.2，实时信息交换部分使用GatewayWorker；前者使用MySQL作为数据库，后者使用Redis作为缓存。&lt;/p&gt;

&lt;p&gt;上面的四个框架/应用，我就用过一个MySQL，因此项目进行过程中总是少不了疯狂的查gu阅ge各文档、教程。&lt;/p&gt;

&lt;p&gt;理解了项目结构以后，就可以开始修改代码实现要求了。其中由于原来的前端代码过于飘逸，我怕理解的时间还不如重新写一份，因此被我全部推倒进行了重构（现在来看，绝对绝对不要随意重构，特别仅仅是因为你看不太懂以前的代码的时候。。。）。那原来的代码有多飘逸呢，首先，聊天室说大不大说小不小的这么一个程序，从头到尾他只有一个类：IMClient。所有的消息处理，按键响应等等等等全在这里。什么MVC，不存在的。因此代码的高度耦合导致极低的代码可读性，但是仅仅是只有一个类就算了，类中一些关键回调函数，比如消息响应的回调，原作者出于兼容性的考虑（原应用针对手机端、电脑端、普通用户登录、客服用户登录的不同情况均有不同的响应页面），这些回调函数均由各个html页面内的script标签的代码分别传入，也就是说，代码的具体实现各个文件都不同，有点像虚基类和其子类的关系。要同时维护这么多份相似功能的代码显然不太现实，而且由于JS的灵活性，阅读代码的时候也不好找到被传入的回调函数。当时我理解代码的时候很痛苦，为了理解某个功能是如何实现的，只得在不同文件间跳来跳去，希望抓住那回调函数的身影。。。（其实这个时候chrome开发者工具真的超好用，显示信息很详细）&lt;/p&gt;

&lt;p&gt;在重构的过程中遇到了不少工程架构上的问题，下期再讲。。先睡了&lt;/p&gt;</content><author><name></name></author><summary type="html">已经实习了一个多月了，期间就接触了两个项目：第一个项目是替换一下老旧的API，工作量比较少因此一周内就完成了；第二个项目目前还在做，大概是要完成一个聊天室的东西。</summary></entry><entry><title type="html">说说实习的前端项目</title><link href="https://thissentenceiswrong.github.io/2017/05/05/%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%932.html" rel="alternate" type="text/html" title="说说实习的前端项目" /><published>2017-05-05T00:00:00+08:00</published><updated>2017-05-05T00:00:00+08:00</updated><id>https://thissentenceiswrong.github.io/2017/05/05/%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%932</id><content type="html" xml:base="https://thissentenceiswrong.github.io/2017/05/05/%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%932.html">&lt;p&gt;​	昨天说到，我决定重构这个聊天室项目的前端代码。因为我在UCC做大作业的时候干过类似的前端项目，所以我觉得这次应该也会比较简单。
​	确实，不就是个聊天室嘛，可以想象最麻烦的地方不过就是处理与服务器间的各种消息通信了。而且这个东西以发送文字为主，图片表情什么的不存在的，页面上不需要太多的其他功能。
​	一开始的进度是比较快的，很多功能直接从大作业搬来用，代码结构也不要费脑子重新设计。但是渐渐的我发现这代码越写越不优雅了，问题主要出在保持渲染的页面与数据一致这方面。
​	JavaScript是一门相当灵活的语言，而到处都是的回调函数也是这门语言的特色。我们浏览网页的时候，很多信息的获取都是异步的，你不知道信息什么时候到，因此你没办法傻等着。一般是先创建页面提示载入中，然后在信息获取到后替换掉原先的载入页面。我在做这个聊天室的时候面对这种问题处理的不是很好，几乎还是在用顺序执行的理念来做，根本不考虑异步的特性。
​	这让我想起以前接触过的一个框架&lt;em&gt;Meteor&lt;/em&gt;，当时用的时候没觉得这个全自动同步数据及渲染的东西有多实用，现在才发现他解决的问题是何等重要且常见的。我有空回去读一读他的源代码，看看是如何实现这种同步的。&lt;/p&gt;</content><author><name></name></author><summary type="html">​ 昨天说到，我决定重构这个聊天室项目的前端代码。因为我在UCC做大作业的时候干过类似的前端项目，所以我觉得这次应该也会比较简单。 ​ 确实，不就是个聊天室嘛，可以想象最麻烦的地方不过就是处理与服务器间的各种消息通信了。而且这个东西以发送文字为主，图片表情什么的不存在的，页面上不需要太多的其他功能。 ​ 一开始的进度是比较快的，很多功能直接从大作业搬来用，代码结构也不要费脑子重新设计。但是渐渐的我发现这代码越写越不优雅了，问题主要出在保持渲染的页面与数据一致这方面。 ​ JavaScript是一门相当灵活的语言，而到处都是的回调函数也是这门语言的特色。我们浏览网页的时候，很多信息的获取都是异步的，你不知道信息什么时候到，因此你没办法傻等着。一般是先创建页面提示载入中，然后在信息获取到后替换掉原先的载入页面。我在做这个聊天室的时候面对这种问题处理的不是很好，几乎还是在用顺序执行的理念来做，根本不考虑异步的特性。 ​ 这让我想起以前接触过的一个框架Meteor，当时用的时候没觉得这个全自动同步数据及渲染的东西有多实用，现在才发现他解决的问题是何等重要且常见的。我有空回去读一读他的源代码，看看是如何实现这种同步的。</summary></entry><entry><title type="html">Hello World</title><link href="https://thissentenceiswrong.github.io/2017/05/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Hello World" /><published>2017-05-05T00:00:00+08:00</published><updated>2017-05-05T00:00:00+08:00</updated><id>https://thissentenceiswrong.github.io/2017/05/05/welcome-to-jekyll</id><content type="html" xml:base="https://thissentenceiswrong.github.io/2017/05/05/welcome-to-jekyll.html">&lt;p&gt;Hello World!&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello World!</summary></entry><entry><title type="html">PHP 使用 String</title><link href="https://thissentenceiswrong.github.io/2017/05/05/PHP-%E4%BD%BF%E7%94%A8-String.html" rel="alternate" type="text/html" title="PHP 使用 String" /><published>2017-05-05T00:00:00+08:00</published><updated>2017-05-05T00:00:00+08:00</updated><id>https://thissentenceiswrong.github.io/2017/05/05/PHP-%E4%BD%BF%E7%94%A8-String</id><content type="html" xml:base="https://thissentenceiswrong.github.io/2017/05/05/PHP-%E4%BD%BF%E7%94%A8-String.html">&lt;p&gt;本来并不打算做服务器后台方面的事，没想到实习一不小心就被丢了一坨有关网站服务器的工作，PHP变成了天天对着发呆的东西。。。&lt;/p&gt;

&lt;p&gt;由于并没有系统自学过PHP这门语言，因此很多编程经验我都直接照搬其他语言的，比如字符串。&lt;/p&gt;

&lt;p&gt;我一直默认 PHP 中的字符串和 JavaScript 的差不多，即单双引号都可以表示字符串，且这两种表示方法没有区别。比如：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World!\nI'm Jeff.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello World!\nI\'m Jeff.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;为了演示转义字符的使用，结果看起来有点丑。但是表达的东西是一样的。&lt;/p&gt;

&lt;p&gt;结果PHP的字符串并不一样，并且有三种字符串的表达，让人不禁想起孔乙己：“茴字的四种写法你知道么”。不过这三种方式各有使用场景，因此了解一下其实非常有帮助。&lt;/p&gt;

&lt;h5 id=&quot;1-单引号表示&quot;&gt;1. 单引号表示&lt;/h5&gt;
&lt;p&gt;单引号表示下规则最简单，不对字符串中进行任何转义，仅转义&lt;code class=&quot;highlighter-rouge&quot;&gt;\'&lt;/code&gt;转义符。&lt;/p&gt;

&lt;h5 id=&quot;2-双引号表示&quot;&gt;2. 双引号表示&lt;/h5&gt;
&lt;p&gt;双引号表示的规则是我们所熟知的，可以使用转义，可以放 php 变量。&lt;/p&gt;

&lt;h5 id=&quot;3-heredoc表示&quot;&gt;3. HereDoc表示&lt;/h5&gt;
&lt;p&gt;这个我是第一次听说，有点像 Python 中的 String Doc。这个不用给单引号或双引号加转义，需要用PHP处理大段纯文本的使用是很方便的。用来输出HTML应该也会很方便，等会我就去把项目里都换上这个试试。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;三种方法的样例如下：&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$var = 233;
// 单引号，不支持转义
echo 'Hello\' World! \n $var';

echo &quot;\n------\n&quot;;

// 双引号，支持所有转义
echo &quot;Hello\&quot; World! \n $var&quot;;

echo &quot;\n------\n&quot;;

// HereDoc
// 不用转义
echo &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt; DOC&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nVar:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;DOC&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行结果为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hello' World! \n $var
------
Hello&quot; World! 
 233
------
Hello '&quot; World! 
Var: 233
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">本来并不打算做服务器后台方面的事，没想到实习一不小心就被丢了一坨有关网站服务器的工作，PHP变成了天天对着发呆的东西。。。</summary></entry></feed>